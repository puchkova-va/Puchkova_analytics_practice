@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Определение участников системы
Person(user, "Пользователь", "Пользователь системы")

' Сервисы
System_Boundary(s1, "Система компании") {
   
    Container(Api, "API-шлюз")
    Container(web, "Веб-приложение")
    ContainerQueue(queue, "Брокер", "Apache Kafka", "Очередь запросов на оформление заказа")
    ContainerQueue(queue2, "Брокер", "Apache Kafka", "Очередь запросов на проверку наличия товара")
    ContainerQueue(queue3, "Брокер", "Apache Kafka", "Очередь запросов на оформление доставки")
    ContainerQueue(queue7, "Брокер", "Apache Kafka", "Очередь запросов на формирование отчета")
    ContainerQueue(queue8, "Брокер", "Apache Kafka", "Очередь запросов на отправку информации об оплате")
    ContainerQueue(queue9, "Брокер", "Apache Kafka", "Очередь запросов на формирование платежных документов")

    System_Boundary(system_user_service, "Сервис пользователей"){
        Container(s_user, "Микросервис управления профилями", "Хранит информацию о пользователях, их заказах, избранном и т.д.")
        Container(autorize, "Микросервис авторизации", "Осуществляет проверку прав пользователя для работы в системе.")
        ContainerDb(db, "База данных", "PostgreSQL", "Хранит данные о пользователях, избранных товарах, заказах и платежах") 
        Container(cash, " Redis")
    }
    System_Boundary(system_trade_service, "Сервис товарной системы") {
        Container(order, "Микросервис заказов", "Обрабатывает создание, изменение и отслеживание заказов и отслеживает статусы доставки.")
        Container(catalog, "Микросервис товарного каталога", "Управляет товарами, ценами и характеристиками.")
        Container(payment, "Микросервис оплаты", "Обрабатывает операцию оплаты, формирует необходимые документы.")
        ContainerDb(db1_2, "База данных", "PostgreSQL Master", "Хранит данные о заказах")
        ContainerDb(db1_1, "База данных", "PostgreSQL Master", "Хранит данные о заказах")
        ContainerDb(db1_3, "База данных", "PostgreSQL Master", "Хранит данные о заказах")
        ContainerDb(db1_1_1, "База данных", "PostgreSQL Slave", "Хранит данные о заказах")
        ContainerDb(db1_2_1, "База данных", "PostgreSQL Slave",  "Хранит данные о заказах")
        ContainerDb(db1_3_1, "База данных", "PostgreSQL Slave", "Хранит данные о заказах")
        ContainerDb(db2, "База данных", "PostgreSQL", "Хранит данные о товарах")
        ContainerDb(db3, "База данных", "PostgreSQL", "Хранит данные о оплатах")
        Container(cash1, " Redis")
        ContainerQueue(queue1, "Брокер", "Apache Kafka", "Очередь запросов на оплату заказа")
    }
    System_Boundary(system_delivery_service, "Сервис доставки") {
        Container(route, "Микросервис управления маршрутами/логистики", "Обрабатывает создание, изменение маршрутов, хранит информацию, через кого реализуется доствавка.")
        Container(tracking, "Микросервис отслеживания доставки", "Отслеживает пермещение и статус заказа.")
        Container(interaction, "Микросервис взаимодействия с внешними службами", "Реализует обмен данными о доставках с партнерскими службами.")
        Container(distributions, "Микросервис распределения заказа","Реализует распределение заказа на поставщика и внутреннюю доставку компании.")
        ContainerDb(db4, "База данных", "PostgreSQL", "Хранит данные о логистике") 
        ContainerDb(db5, "База данных", "PostgreSQL", "Хранит данные о местонахождении и статусе доставки") 
        ContainerDb(db6, "База данных", "PostgreSQL", "Хранит данные о доставках и партнерах")
        ContainerDb(db7, "База данных", "PostgreSQL", "Хранит данные о службах доставки компании и пратнерах")
        Container(cash2, " Redis")
        Container(cash3, " Redis")
        Container(cash4, " Redis")
    }
    System_Boundary(system_warehouse_service, "Сервис управления складами") {
        Container(control, "Микросервис контроля и пермещения запасов", "Реализует работу с запасами склада.")
        Container(interaction, "Микросервис взаимодействия с внешними службами", "Реализует обмен данными о доставках с партнерскими службами.")
        Container(inventory, "Микросервис инвентаризации", "Аналитика и формирование отчетности по запасам и складскому оборудованию.")
        ContainerDb(db8, "База данных", "PostgreSQL", "Хранит данные о запасах")
        ContainerDb(db9, "База данных", "PostgreSQL", "Хранит данные о доставках с партнерскими службами")
        ContainerDb(db10, "База данных", "PostgreSQL", "Хранит данные о аналитике и отчеты по запасам и оборудованию")
        Container(cash5, " Redis")
        Container(cash6, " Redis")
        Container(cash7, " Redis")
    }
    System_Boundary(system_finance_service, "Финансовый сервис\бэкофис") {
        Container(finance, "Микросервис управления финансовыми потоками", "Обрабатывает платежи и хранит информацию о них.")
        Container(statistics, "Микросервис для сбора статистики и аналитики ", "Мониторинг работы внутренних и сторонних сервисов и формирование отчетности по их деятельности.")
        Container(reports, "Микросервис оплат", "Создает счета на оплату для поставщиков и оплаты счетов компании.")
        Container(tasks, "Микросервис административных задач", "Обрабатывает информацию о внутренних задачах компании.")
        ContainerDb(db11, "База данных", "PostgreSQL", "Хранит данные о финансовых потоках компании")
        ContainerDb(db12, "База данных", "PostgreSQL", "Хранит данные с статистикой и аналитикой по отделам")
        ContainerDb(db13, "База данных", "PostgreSQL", "Хранит данные о счетах, выставляемых компании и компанией")
        ContainerDb(db14, "База данных", "PostgreSQL", "Хранит данные о внутренних задачах компании")
    }
}
Container(api, "Api-шлюз")
System_Boundary(s2, "Система поставщиков") {
     System_Boundary(system_provider_service, "Сервис по управления поставками")   
}

' Связи
Rel(user, web, "Просматривает и заказывает товары.","HTTP/REST API")
Rel(web, Api, "Перенаправляет запросы.","HTTP/REST API")
Rel(Api, autorize, "Запрашивает авторизацию для получения прав доступа.","HTTP/REST API")
Rel(Api, catalog, "Запрашивает каталог товаров.","HTTP/REST API")
Rel(order, tracking, "Проверка статуса доставки.")
Rel(catalog, Api, "Запрашивает авторизацию для получения прав доступа.","HTTP/REST API")
Rel(autorize, s_user, "При удачной авторизации дайте доступ к профилю пользователя.")
Rel(s_user, queue, "Формирует запрос на формление заказа.", "Kafka TLC")
Rel(queue , order, "Передает запрос на оформление заказа.", "Kafka TLC")
Rel(order, queue1, "Формирует запрос на оплату заказа.", "Kafka TLC")
Rel(queue1, payment, "Передает запрос на оплату заказа.", "Kafka TLC")
Rel(inventory, control, "Получение информации по запасам.")
Rel(inventory, statistics, "Отправка информации по проведенной инвентаризации.")
Rel(catalog, queue2,"Формирует запрос на проверку наличия товара", "Kafka TLC")
Rel(queue2, control, "Отправляет запрос на проверку наличия товара", "Kafka TLC")
Rel(route, tracking, "Запрашивает информацию о местонахождении заказа.")
Rel(interaction, route, "Передает информацию о заказе и маршруте.")
Rel(order, distributions, "Передает информацию о заказе.")
Rel(distributions, route, "Передает информацию по внутренней доставке для формирования логистики.")
Rel(route, statistics, "Передает информацию по доставке для формирования платежныж документов и отчетности по доставке.")
Rel(interaction, api, "Перенаправляет запросы.","HTTP/REST API")
Rel(api, system_provider_service, "Передает информацию о заказе для реализации доставки","HTTP/REST API")
Rel(order, api, "Перенаправляет запросы.","HTTP/REST API")
Rel(api, system_provider_service, "Передает информацию о заказе для реализации сборки заказа и дальнейшей доставки через поставщика.","HTTP/REST API")
Rel(reports, api, "Перенаправляет запросы.","HTTP/REST API")
Rel(api, system_provider_service, "Передает счета для оплаты.","HTTP/REST API")
Rel(reports, finance, "Передает информацию о всех проведенных счетах.")
Rel(statistics, tasks, "Передает информацию для формирования работ, необходимых бизнесу.")
Rel(s_user, cash, "")
Rel(cash, db, "Чтение и запись в бд")
Rel(catalog, cash1, "")
Rel(cash1, db2, "")
Rel(order, db1_1, "")
Rel(db1_1, db1_1_1, "")
Rel(order, db1_2, "")
Rel(db1_2, db1_2_1, "")
Rel(order, db1_3, "")
Rel(db1_3, db1_3_1, "")
Rel(payment, db3, "")
Rel(payment, queue8, "Формирование запросов на отправку информации об оплате", "Kafka TLC")
Rel(queue8, finance, "Отправка запросов на отправку информации об оплате", "Kafka TLC")
Rel(route, cash2, "")
Rel(cash2, db4, "")
Rel(tracking, db5, "")
Rel(interaction, cash3, "")
Rel(cash3, db6, "")
Rel(distributions, cash4, "")
Rel(cash4, db7, "")
Rel(control, cash5, "")
Rel(cash5, db8, "")
Rel(interaction, cash6, "")
Rel(cash6, db9, "")
Rel(inventory, cash7, "")
Rel(cash7, db10, "")
Rel(finance, db11, "")
Rel(statistics, db12, "")
Rel(reports, db13, "")
Rel(tasks, db14, "")
@enduml