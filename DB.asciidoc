= База данных

== Реляционная база данных

Для единой БД можно выделить сущности согласно субдоменам системы компании.

=== Сущности

Можно выделить следующие сущности:

1. Пользователь (User);

2. Товар (Product);

3. Заказ (Order);

4. Маршрут (Route);

5. Отслеживание (Tracking);

6. Доставка (Delivery);

7. Запасы (Stock);

8. Платеж (Payment);

9. Склад (Storage).

=== Атрибуты сущностей

1. Пользователь (User):
   - UserID (PK) - уникальный идентификатор пользователя;
   - Name - имя пользователя;
   - Surname - фамилия пользователя;
   - Email - адрес электронной почты;
   - PhoneNumber - номер телефона;
   - DeliveryAddress - адрес доставки;
   - Password - пароль от учетной записи пользователя;
   - Role - роль пользователя (клиент, администратор и т.д.).

2. Товар (Product):
   - ProductId (PK) - уникальный идентификатор товара;
   - Name - наименование товара;
   - Description - описание товара;
   - Price - цена товара;

3. Заказ (Order):
   - OrderID (PK) - уникальный идентификатор заказа;
   - UserID (FK) - идентификатор пользователя, сделавшего заказ;
   - OrderDate - дата оформления заказа;
   - OrderStatus - статус заказа. 

4. Маршрут (Route):
   - RouteID (PK) - уникальный идентификатор маршрута;
   - StartPoint - начальная точка маршрута;
   - EndPoint - конечная точка маршрута;
   - Distance - длина маршрута;
   - TravelTime - предполагаемое время доставки.

5. Отслеживание (Tracking):
   - TrackingId (PK) - уникальный идентификатор отслеживания доставки;
   - OrderId (FK) - идентификатор отслеживаемого заказа;
   - CurrentLocation - текущее местонахождение;
   - UpdateDateTime - время последнего обновления информации о местонахождении;
   - TrackingStatus - статус отслеживания 

6. Доставка (Delivery):
   - DeliveryID (PK) - уникальный идентификатор доставки;
   - OrderID (FK) - идентификатор заказа, отправленного в доставку;
   - RouteID (FK) - индентификатор маршрута, по которму реализуется доставка;
   - DeliveryDate - дата доставки;
   - DeliveryStatus - статус доставки (например, "в процессе", "доставлено", "задержано").

7. Запасы (Stock):
   - StockID (PK) - уникальный идентификатор записи на складе;
   - ProductID (FK)- идентификатор товара на складе;
   - StockinQuantity - количество товра на складе;
   - LastUpdate - дата последнего обновления информации.

8. Платеж (Payment):
   - PaymentID (PK) - уникальный идентификатор платежа;
   - OrderID (FK) - идентификатор товара, к которму относится платеж;
   - Amount - сумма платежа;
   - PaymentDate - дата платежа;
   - PaymentStatus - статус платежа.

9. Склад (Storage):
   - StorageID (PK) - уникальный идентификатор склада;
   - Name - название склада,
   - Location - адресс скалада.
 
=== Связи 

1. Пользователь (User) -> Заказ (Order)
   - Один пользователь может иметь несколько заказов.
   - Связь: один ко многим (1:N).

2. Заказ (Order) -> Товар (Product)
   - Один заказ может содержать несколько товаров.
   - Связь: многие ко многим (M:N). Для реализации этой связи потребуется промежуточная таблица OrderItems с атрибутами:
     - OrderID (Foreign Key)
     - ProductID (Foreign Key)
     - Quantity - Количество
     - Status - статус товара ("в наличии", "забронирован", "отсутствует")

3. Заказ (Order) -> Доставка (Delivery)
   - Один заказ может быть связан с одной доставкой.
   - Связь: один к одному (1:1).

4. Доставка (Delivery) -> Маршрут (Route)
   - Одна доставка может быть связана с одним маршрутом.
   - Связь: один к одному (1:1).

5. Товар (Product) -> Склад (Storage)
   - Один товар может быть связан с несколькими складами.
   - Связь: один ко многим (1:N).

6. Товар (Product) -> Запасы (Stock)
   - Каждый товар может иметь одну запись о запасах на складе.
   - Связь: один к одному (1:1).

7. Заказ (Order) -> Оплата (Payment)
   - Один заказ может быть связан с одной оплатой.
   - Связь: один к одному (1:1).

8. Заказ (Order) -> Отслеживание (Tracking): 
   - Один заказ может иметь несколько записей отслеживания (например, при обновлении местоположения или изменении статуса доставки), но каждая запись отслеживания относится только к одному заказу.
   - Связь: многие к одному (N:1).

9. Доставка (Delivery) -> Заказ (Order)
   - Одна доставка может быть связана с несколькими заказами.
   - Связь: один ко многим (1:N).

=== Диаграмма реляционной базы данных

image:out/Diagram_DB_R/Diagram_DB_R.svg[]

== Нереляционная аза данных 

В случае нереляционной базы данных, такой как MongoDB, подход будет отличаться от реляционного. Вместо создания множества таблиц с внешними ключами и сложными связями мы будем использовать коллекции, в которых данные могут быть вложенными или ссылаться на другие документы через идентификаторы.

Для описания системы с минимальным количеством коллекций, давайте предположим, что для этой базы данных нам понадобятся как минимум две коллекции:

1. User (Пользователи)
2. Order (Заказы)
3. Delivery (Доставка)

=== Структура коллекций и документов

1. Коллекция User:
   - user_id: string
   - name: string
   - sur_name: string
   - email: string
   - phone_number: string
   - password: string
   - role: string
   - password: string
   - orders: array
2. Коллекция Order:
   - order_id: string
   - user_id: string
   - order_date: date
   - delivery_address: string
   - order_status: string
   - items: array
   - payment: object
   - delivery: object
3. Документ Items:
   - product_id: string
   - product_name: string
   - quantity: int
   - price: float
4. Документ Payment:
   - payment_id: string
    - payment_date: date
    - amount: float
    - payment_status: string
5. Коллекция Delivery:
   - delivery_id: string
   - route: object
   - delivery_date: date
   - delivery_status: string
6. Документ Route:
   - route_id: string
   - start_point: string
   - end_point: string
   - route_length: int
   - estimated_time: string

=== Диаграмма нереляционной базы данных

image::out/Diagram_DB_NR/Diagram_DB_NR.svg[]
